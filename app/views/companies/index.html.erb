<script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<div class="content">
  <div class="map-div row">
    <div id="map" class="ten columns"></div>
    <div class="type-column two columns">
      <table>
        <thead>
          <th>Key</th>
        </thead>
        <tbody>
          <% Company::TYPES.each do |type| %>
            <tr>
              <td class="type-key <%= type %>"><input type="checkbox", name="<%= type %>", checked="checked", class="checkbox"><div id="<%= type %>", class="sub-select"><%= type %></div>
                <ul id="<%= type %>-nav", class="sub-nav display-types">
                </ul> 
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>
<div class="row">
  <p id="notice" class="twelve columns"><%= notice %></p>
</div>

<script type="text/javascript">
 $(document).ready(function(){
    var json = <%=raw @hash.to_json %>    
    var handler;
    var markers = [];

    function buildMap(){
      var randomise = 20;
      handler = Gmaps.build('Google', { markers: { maxRandomDistance: randomise, doClustering: true } });
      // handler = Gmaps.build("Google", { markers: { maxRandomDistance: randomise, clusterer: {gridSize: 10, maxZoom: 16} } })
      handler.buildMap({ internal: {id: 'map'}}, function(){
        markers = handler.addMarkers(json);
        _.each(json, function(elt, index){
          _.extend(markers[index], elt);
        });
        handler.bounds.extendWith(markers);
        handler.fitMapToBounds(); 
     });
    }

    function showCategories(categories){
      var shownMakers = []
      _.each(markers, function(marker){
        if (_.contains(categories, marker.cat)){
          marker.show(); 
          shownMakers.push(marker);
        }
        else
          marker.hide();
      })
      handler.resetBounds();
      handler.bounds.extendWith(shownMakers);
      handler.fitMapToBounds();
    }

    function selectMarker(name){
      _.each(markers, function(marker){
          if(marker.title.toLowerCase() == name.toLowerCase()){
          handler.getMap().setZoom(14);
          marker.setMap(handler.getMap());
          marker.panTo();
          google.maps.event.trigger(marker.getServiceObject(), 'click');
        }
      })
    }
    
    $("input[type='checkbox']").on('click', function(evt, foo){
      var checkedCategories = [];
      $("input:checked").each(function(index, elt){
        checkedCategories.push($(elt).attr('name'));
      });
      showCategories(checkedCategories);
    });

    $("#search-btn").click(function() {
      var query = document.forms["search-form"]["search"].value;
      selectMarker(query);
      return false;
    });

    $('.sub-select').click(function() {
        var id = $(this).attr('id');
        var list = <%=raw @companies.to_json %>

        var clear = document.getElementsByClassName("sub-nav");
        for (var i = 0; i < clear.length; i++){
          clear[i].innerHTML = "";
        }
        var ul = document.getElementById(id+"-nav");

        for(var i = 0; i < list.length; i++) {
          if (id.toLowerCase() == list[i].type_of.toLowerCase())
          {
            ul.innerHTML += ('<li class="select-list"><a class="select-link" id="'+list[i].name+'">'+list[i].name+'</a></li>');
          }
        }
        $('.sub-nav').toggleClass('visible');

        $(".select-link").click(function(){
          selectMarker(this.id);
        });
    });
    
    buildMap();
  });
</script>
